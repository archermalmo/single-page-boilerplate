//
// NOTICE:
//
// Leave this file alone. This will be populated by the _mixins folder
// once you run Grunt. Anything added to the _mixins folder will be
// brought in.
//
// - GABE
/**
 * Creates a centered container using css calc property. Useful for using a full-width background with centered content. This does not work with old browers.
 *
 * @author Gabe Martin
 *
 * @param {Number} $width (900px) - maximum width of container
 * @param {Number} $padding (20px) - container padding if smaller than maximum width
 *
 */

@mixin center-div($width: 900px, $padding: 20px) {
  padding-left: calc(50% - $width/2);
  padding-right: calc(50% - $width/2);
  @media screen and (max-width: $width) {
    padding-left: $padding;
    padding-right: $padding;
  }
}
/**
 * Clearfix for legacy browsers.
 *
 * @author Gabe Martin
 *
 */
@mixin clearfix {
  & {
    *zoom: 1;
  }
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}
/**
 * Creates EM value based on pixel/context input.
 *
 * @author Gabe Martin
 *
 * @param {Number} $target-px - desired pixel value
 * @param {Number} $context (16px) - base font size
 *
 */
@function em($target-px, $context: 16px) {
  @return $target-px / $context * 1em;
}
@mixin flex($target, $context) {
  width: $target / $context * 100%;
}
/**
 * Hides text to make way for background image.
 *
 * @author Gabe Martin
 *
 */

@mixin hide-text {
  overflow: hidden;
  &:before {
    content: "";
    display: block;
    width: 0;
    height: 100%;
  }
}

/**
 * Retina background-image. Use after setting standard resolution image.
 *
 * @author Gabe Martin
 *
 * @requires is-true
 *
 * @param {Image Source} $image - location of retina (@2x) image
 * @param {Number} $width - @1x image size
 * @param {Number} $height - @2x image size
 *
 */
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}
/**
 * Applied to a parent tag, this will create a grid of equally spaced child elements. All items should be the same height. Best for image thumbnails.
 *
 * @author Gabe Martin
 *
 * @requires is-true
 *
 * @param {Number} $cols (2) - desired number of columns
 * @param {Percentage} $parent_width_adjust (98.9%) - adjust the parent container
 * @param {Percentage} $child_width_adjust (49%) - adjust the child containers
 *
 */
@mixin justifygrid($cols: 2, $parent_width_adjust: 98.9%, $child_width_adjust: 49%) {
  text-align: justify;
  list-style: none;
  padding: 0;
  > * {
    display: inline-block;
    margin: 0;
    @if $child_width_adjust != 49% {
      width: $child_width_adjust;
    }
    @else {
      width: floor($parent_width_adjust / $cols);
    }
    text-align: left;
  }
  &:after {
    content: "";
    display: inline-block;
    width: 100%;
  }
}
/**
 * Sets the default, :hover, and :visited link colors.
 *
 * @author Gabe Martin
 *
 * @param {Color Value} $default (blue) - default link color
 * @param {Color Value} $hover (red) - hover color
 * @param {Color Value} $visite (purple) - visited color
 *
 */
@mixin link-color($default: "blue", $hover: "red", $visited: "purple") {
  color: $default;
  &:hover {
    color: $hover;
  }
  &:visited {
    color: $purple;
  }
}
/**
 * Shorthand for setting the position for absolute and fixed elements.
 *
 * @author Gabe Martin
 *
 * @param {Number} $top (0) - top position
 * @param {Number} $right (0) - right position
 * @param {Number} $bottom (0) - bottom position
 * @param {Number} $left (0) - left position
 *
 */
@mixin positions($top: 0, $right: 0, $bottom: 0, $left: 0) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
/**
 * Removes bullets and padding from lists.
 *
 * @author Gabe Martin
 *
 */
 @mixin striplist {
  padding: 0;
  list-style: none;
}